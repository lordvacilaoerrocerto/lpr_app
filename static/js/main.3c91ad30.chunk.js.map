{"version":3,"sources":["logo.svg","Components/Row.js","Components/Greeting.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Row","props","label","children","Greeting","name","useFormInput","surname","width","useState","window","innerWidth","setWidth","useEffect","handleResize","addEventListener","removeEventListener","useWindowWidth","value","onChange","initialValue","setValue","e","target","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,oHCE5B,SAASC,EAAIC,GAE1B,OAAQ,+BAAQA,EAAMC,MAAOD,EAAME,UCDtB,SAASC,IAEvB,IAAMC,EAAOC,EAAa,QACpBC,EAAUD,EAAa,UACvBE,EA6BP,WACC,IAAD,EAC2BC,mBAASC,OAAOC,YAD3C,mBACQH,EADR,KACeI,EADf,KASC,OAPAC,qBAAU,WACT,IAAMC,EAAe,kBAAMF,EAASF,OAAOC,aAE3C,OADAD,OAAOK,iBAAiB,SAAUD,GAC3B,WACNJ,OAAOM,oBAAoB,SAAUF,OAGhCN,EAvCOS,GAEd,OACE,iCACC,kBAACjB,EAAD,CAAKE,MAAM,QACV,2BAAOgB,MAAOb,EAAKa,MAAOC,SAAUd,EAAKc,YAE1C,kBAACnB,EAAD,CAAKE,MAAM,WACV,2BAAOgB,MAAOX,EAAQW,MAAOC,SAAUZ,EAAQY,YAEhD,kBAACnB,EAAD,CAAKE,MAAM,SACTM,IAON,SAASF,EAAac,GACrB,IAAD,EAC2BX,mBAASW,GADpC,mBACQF,EADR,KACeG,EADf,KAKC,MAAO,CACNH,QACAC,SALD,SAAsBG,GACrBD,EAASC,EAAEC,OAAOL,SClBLM,MANf,WACE,OACE,kBAACpB,EAAD,OCKgBqB,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c91ad30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport default function Row(props) \r\n{\r\n  return (<label>{props.label}{props.children}</label>);\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Row from './Row';\r\n\r\nexport default function Greeting() \r\n{\r\n\tconst name = useFormInput('Mary');\t\r\n\tconst surname = useFormInput('Poppys');\r\n\tconst width = useWindowWidth();\r\n\t\r\n\treturn (\r\n\t\t\t<section>\r\n\t\t\t\t<Row label=\"Name\">\r\n\t\t\t\t\t<input value={name.value} onChange={name.onChange}/>\t\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row label=\"Surname\">\r\n\t\t\t\t\t<input value={surname.value} onChange={surname.onChange}/>\t\r\n\t\t\t\t</Row>\r\n\t\t\t\t<Row label=\"width\">\r\n\t\t\t\t\t{width}\t\r\n\t\t\t\t</Row>\t\t\r\n\r\n\t\t\t</section>\r\n\t);\t\r\n\r\n}\r\nfunction useFormInput(initialValue)\r\n{\r\n\tconst [value, setValue] = useState(initialValue)\r\n\tfunction handleChange(e) {\r\n\t\tsetValue(e.target.value);\r\n\t}\r\n\treturn {\r\n\t\tvalue,\r\n\t\tonChange : handleChange\r\n\t};\t\r\n}\r\nfunction useWindowWidth()\r\n{\r\n\tconst [width, setWidth] = useState(window.innerWidth);\r\n\tuseEffect(() => {\r\n\t\tconst handleResize = () => setWidth(window.innerWidth);\r\n\t\twindow.addEventListener('resize', handleResize);\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('resize', handleResize);\r\n\t\t};\t\t\r\n\t})\r\n\treturn width;\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Greeting from './Components/Greeting.js';\n\nfunction App() {\n  return (\n    <Greeting></Greeting>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}